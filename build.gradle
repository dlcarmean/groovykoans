// vim: ai sm sw=4 ts=4 et
/*
 * Copyright (c) 2012-2014 nadavc <https://twitter.com/nadavc>
 * This work is free. You can redistribute it and/or modify it under the
 * terms of the WTFPL, Version 2, as published by Sam Hocevar.
 * See the COPYING file for more details.
 */

import java.awt.*
import java.util.List

/*
apply plugin: 'groovy'
*/

plugins {
    id 'groovy'
}

//apply from: 'gradle/idea.gradle'
//apply from: 'gradle/eclipse.gradle'


version = '0.5'

repositories {
    //jcenter()
    mavenCentral()
}

dependencies {
//    def groovyComponents = ['groovy', 'groovy-ant', 'groovy-sql', 'groovy-test']
//  testCompile groovyComponents.collect { "org.codehaus.groovy:$it:2.4.3" }

//  testCompile 'com.h2database:h2:1.3.168'
//  testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
//    implementation 'com.google.guava:guava:30.1.1-jre'
//    testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'
//    testImplementation 'junit:junit:4.13.2'

    implementation 'org.codehaus.groovy:groovy:3.0.8'
    implementation 'org.codehaus.groovy:groovy-ant:3.0.8'
    implementation 'org.codehaus.groovy:groovy-sql:3.0.8'
    implementation 'org.codehaus.groovy:groovy-test:3.0.8'
    implementation 'com.h2database:h2:1.4.200'
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'org.spockframework:spock-core:2.1-M2-groovy-3.0'
    implementation 'junit:junit:4.13.2'
    implementation 'org.codehaus.groovy:groovy-xml:3.0.8'
}

task removeSolutions {
    description = 'Removes the solutions from all Koans, so you can start fresh!'

    doLast {
        def solutionsRemoved = 0
        def solutionRegex = $/(?sm)(// -{12} START EDITING HERE -{22})(.*?)(\s+// -{12} STOP EDITING HERE  -{22})/$
        sourceSets.test.allSource.files.each { File sourceFile ->
            solutionsRemoved += (sourceFile.text =~ solutionRegex).count
            sourceFile.text = sourceFile.text.replaceAll(solutionRegex, '$1\n\n$3')
        }
        println "Removed $solutionsRemoved solutions from Koans. Good luck!"
    }
}

// Adapted from http://www.practicalgradle.org/blog/2011/01/convenient-test-execution-with-camel-case-support/
tasks.addRule('Pattern: koan<Number>: Runs a single Koan') { String taskName ->
    if (taskName.startsWith('koan') && taskName.length() > 5) {
        // create a dummy task for the task name specified on the command line
        def dummyTask = task(taskName)
        def koanName = taskName[0].toUpperCase() + taskName[1..-1]

        // make all Test tasks a dependency of the dummy task and reset the includes
        tasks.withType(Test) { testTask ->
            logger.info("Single Koan Execution: apply include pattern to Test task <$testTask.name>")
            testTask.includes = WrapUtil.toSet("**/${koanName}.class")
            dummyTask.dependsOn testTask
        }
    }
}
/*
task wrapper(type: Wrapper) {
    gradleVersion = '7.3.1'
}
*/
// show welcome message
/*
task sayHello << {
    List<String> lines = file('gradle/one-liners.txt').readLines()
    def quote = lines.get(new Random().nextInt(lines.size() - 1))
    println "Groovy Koans ${version}:\n${quote}"
    println "${'-' * quote.size()}\n"
}

test.dependsOn sayHello
*/
// launch browser if test failed. otherwise show that koan is complete
gradle.taskGraph.afterTask { task, taskState ->
    if (task.name != 'test')
        return

    if (taskState.failure) {
        String testRepDir = project.testReportDir
        Desktop.desktop.browse(new File(testRepDir, 'index.html').toURI())
    } else {
        println "Koan is complete. Well done!"
    }
}

// since we're running in quiet logging, show the user what tests are running
tasks.withType(Test) { testTask ->
    testTask.beforeTest { descriptor ->
        print "Running exercises in $descriptor.name()".padRight(60, '.')
    }
    testTask.afterTest { descriptor, result ->
        println result.resultType
    }
}
